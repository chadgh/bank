// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: InsertTransaction.sql

package database

import (
	"context"
	"database/sql"
)

const insertCreditTransaction = `-- name: InsertCreditTransaction :one
INSERT INTO account_transactions 
    (message_id, user_id, credit_cents, currency)
    VALUES ($1, $2, $3, $4)
    RETURNING message_id, user_id, credit_cents, debit_cents, currency, created
`

type InsertCreditTransactionParams struct {
	MessageID   string         `json:"message_id"`
	UserID      string         `json:"user_id"`
	CreditCents int32          `json:"credit_cents"`
	Currency    sql.NullString `json:"currency"`
}

func (q *Queries) InsertCreditTransaction(ctx context.Context, arg InsertCreditTransactionParams) (AccountTransaction, error) {
	row := q.queryRow(ctx, q.insertCreditTransactionStmt, insertCreditTransaction,
		arg.MessageID,
		arg.UserID,
		arg.CreditCents,
		arg.Currency,
	)
	var i AccountTransaction
	err := row.Scan(
		&i.MessageID,
		&i.UserID,
		&i.CreditCents,
		&i.DebitCents,
		&i.Currency,
		&i.Created,
	)
	return i, err
}

const insertDebitTransaction = `-- name: InsertDebitTransaction :one
INSERT INTO account_transactions 
    (message_id, user_id, debit_cents, currency)
    VALUES ($1, $2, $3, $4)
    RETURNING message_id, user_id, credit_cents, debit_cents, currency, created
`

type InsertDebitTransactionParams struct {
	MessageID  string         `json:"message_id"`
	UserID     string         `json:"user_id"`
	DebitCents int32          `json:"debit_cents"`
	Currency   sql.NullString `json:"currency"`
}

func (q *Queries) InsertDebitTransaction(ctx context.Context, arg InsertDebitTransactionParams) (AccountTransaction, error) {
	row := q.queryRow(ctx, q.insertDebitTransactionStmt, insertDebitTransaction,
		arg.MessageID,
		arg.UserID,
		arg.DebitCents,
		arg.Currency,
	)
	var i AccountTransaction
	err := row.Scan(
		&i.MessageID,
		&i.UserID,
		&i.CreditCents,
		&i.DebitCents,
		&i.Currency,
		&i.Created,
	)
	return i, err
}
